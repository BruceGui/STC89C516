C51 COMPILER V9.52.0.0   INITLCD                                                           10/25/2013 16:20:27 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE INITLCD
OBJECT MODULE PLACED IN initLCD.OBJ
COMPILER INVOKED BY: E:\C51Keil\C51\BIN\C51.EXE initLCD.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "initLCD.h"
   2          
   3          #define DataPort P0    //数据口使用DataPor
   4          #define PI 3.141592
   5          
   6          sbit RS    =P2^5;               //数据命令选择
   7          sbit RW    =P2^4;       //写数据/命令
   8          sbit nRD   =P2^3;       //读控制
   9          sbit CS    =P2^2;               //片选
  10          sbit RES   =P2^1;               //复位
  11          
  12          sbit LE    =P2^0;       //74HC573锁存控制
  13          
  14          unsigned int Device_code=0x9328;
  15          
  16          void delayms(unsigned int count)
  17          {
  18   1          int i,j;                                                                                
  19   1          for(i=0;i<count;i++)                                                                    
  20   1             {
  21   2                   for(j=0;j<255;j++);
  22   2             }                                                                                     
  23   1      }
  24          
  25          void Write_Cmd(unsigned char DH,unsigned char DL)
  26          {
  27   1              CS=0;
  28   1              RS=0;
  29   1          nRD=1;
  30   1          RW=0;
  31   1      
  32   1          //注意：当使用8位数据口驱动16位数据模式时，使用74HC573作为IO扩展，程序如下
  33   1          DataPort=DL;            //送低8位命令给573待锁存
  34   1          LE=1;                   //锁存位
  35   1          LE=0;                   //断开锁存,位选573的Q7~Q0仍保持 
  36   1      
  37   1              DataPort=DH;            //送高8位命令给TFT
  38   1      
  39   1              /*
  40   1          //如果使用16位数据口驱动16位数据模式，则无需IO扩展，直接将数据送到数据口即可
  41   1          DataPort_L=DL; 
  42   1          DataPort_H=DH;
  43   1              */
  44   1      
  45   1              RW=1;
  46   1              CS=1;
  47   1      }
  48          
  49          void Write_Data(unsigned char DH,unsigned char DL)
  50          {
  51   1              
  52   1              CS=0;
  53   1              RS=1;
  54   1      
  55   1          //注意：当使用8位数据口驱动16位数据模式时，使用74HC573作为IO扩展，程序如下
C51 COMPILER V9.52.0.0   INITLCD                                                           10/25/2013 16:20:27 PAGE 2   

  56   1              DataPort=DL;            //送低8位数据给573待锁存
  57   1          LE=1;                   //锁存位
  58   1          LE=0;                   //断开锁存,位选573的Q7~Q0仍保持 
  59   1      
  60   1              DataPort=DH;            //送高8位数据给TFT
  61   1      
  62   1              /*
  63   1          //如果使用16位数据口驱动16位数据模式，则无需IO扩展，直接将数据送到数据口即可
  64   1          DataPort_L=DL; 
  65   1          DataPort_H=DH;
  66   1              */
  67   1      
  68   1              RW=0;
  69   1              RW=1;
  70   1              CS=1;
  71   1      }
  72          
  73          void  Write_Data_U16(unsigned int y)
  74          {
  75   1              unsigned char m,n; 
  76   1              m=y>>8;
  77   1              n=y;
  78   1              Write_Data(m,n);
  79   1      }
  80          
  81          void  Write_Cmd_Data (unsigned char x,unsigned int y)
  82          {
  83   1              unsigned char m,n;
  84   1              m=y>>8;
  85   1              n=y;
  86   1              Write_Cmd(0x00,x);
  87   1              Write_Data(m,n);
  88   1      }
  89          
  90          void TFT_Initial(void)
  91          {  
  92   1      
  93   1          RES = 1;    
  94   1              delayms(1);                    // Delay 1ms 
  95   1              RES = 0;  
  96   1              delayms(10);                   // Delay 10ms            
  97   1              RES = 1;  
  98   1              delayms(50);                   // Delay 50 ms  
  99   1        
 100   1              if(Device_code==0x9320)
 101   1           {
 102   2      
 103   2          //************* Start Initial Sequence **********//
 104   2              Write_Cmd_Data(0x00,0x0001);   //Set the OSC bit as ‘1’ to start the internal oscillator
 105   2          Write_Cmd_Data(0x01,0x0100);   // set SS and SM bit
 106   2              Write_Cmd_Data(0x02,0x0700);   // set 1 line inversion
 107   2              Write_Cmd_Data(0x03,0x1030);   //set GRAM Write direction and BGR=1
 108   2          Write_Cmd_Data(0x04,0x0000);   // Resize register
 109   2              Write_Cmd_Data(0x08,0x0202);   // set the back porch and front porch
 110   2          Write_Cmd_Data(0x09,0x0000);   // set non-display area refresh cycle ISC[3:0]
 111   2          Write_Cmd_Data(0x0A,0x0000);   // FMARK function
 112   2          Write_Cmd_Data(0x0C,0x0000);   // RGB interface setting
 113   2              Write_Cmd_Data(0x0D,0x0000);   // Frame marker Position
 114   2          Write_Cmd_Data(0x0F,0x0000);   // RGB interface polarity
 115   2          delayms(30);
 116   2              //*************Power On sequence ****************//
 117   2              Write_Cmd_Data(0x10, 0x16b0);   // SAP, BT[3:0], AP, DSTB, SLP, STB
C51 COMPILER V9.52.0.0   INITLCD                                                           10/25/2013 16:20:27 PAGE 3   

 118   2              delayms(30);
 119   2              Write_Cmd_Data(0x11, 0x0007);   //Write final user’s setting values to VC bit
 120   2              Write_Cmd_Data(0x12, 0x013a);   // set Internal reference voltage
 121   2              Write_Cmd_Data(0x13, 0x1a00);   // VDV[4:0] for VCOM amplitude
 122   2          delayms(30);
 123   2          Write_Cmd_Data(0x29, 0x000c);   // Set VCM[5:0] for VCOMH
 124   2              delayms(30); // Delay 50ms
 125   2      
 126   2              // ----------- Adjust the Gamma Curve ----------//
 127   2              Write_Cmd_Data(0x0030, 0x0000);
 128   2              Write_Cmd_Data(0x0031, 0x0505);
 129   2              Write_Cmd_Data(0x0032, 0x0304);
 130   2              Write_Cmd_Data(0x0035, 0x0006);
 131   2              Write_Cmd_Data(0x0036, 0x0707);
 132   2              Write_Cmd_Data(0x0037, 0x0105);
 133   2              Write_Cmd_Data(0x0038, 0x0002);
 134   2              Write_Cmd_Data(0x0039, 0x0707);
 135   2              Write_Cmd_Data(0x003C, 0x0704);
 136   2              Write_Cmd_Data(0x003D, 0x0807);
 137   2      
 138   2              //------------------ Set GRAM area ---------------//
 139   2              Write_Cmd_Data(0x0050, 0x0000); // Horizontal GRAM Start Address
 140   2              Write_Cmd_Data(0x0051, 0x00EF); // Horizontal GRAM End Address
 141   2              Write_Cmd_Data(0x0052, 0x0000); // Vertical GRAM Start Address
 142   2              Write_Cmd_Data(0x0053, 0x013F); // Vertical GRAM Start Address
 143   2              Write_Cmd_Data(0x0060, 0x2700); // Gate Scan Line
 144   2              Write_Cmd_Data(0x0061, 0x0001); // NDL,VLE, REV
 145   2              Write_Cmd_Data(0x006A, 0x0000); // set scrolling line
 146   2          Write_Cmd_Data(0x20, 0x0000);   // GRAM horizontal Address
 147   2              Write_Cmd_Data(0x21, 0x0000);   // GRAM Vertical Address
 148   2      
 149   2              //-------------- Partial Display Control ---------//
 150   2              Write_Cmd_Data(0x0080, 0x0000);
 151   2              Write_Cmd_Data(0x0081, 0x0000);
 152   2              Write_Cmd_Data(0x0082, 0x0000);
 153   2              Write_Cmd_Data(0x0083, 0x0000);
 154   2              Write_Cmd_Data(0x0084, 0x0000);
 155   2              Write_Cmd_Data(0x0085, 0x0000);
 156   2      
 157   2              //-------------- Panel Control ---------//
 158   2          Write_Cmd_Data(0x90,0x0010);   //Frame Cycle Contral
 159   2              Write_Cmd_Data(0x92,0x0000);   //Panel Interface Contral
 160   2              Write_Cmd_Data(0x93,0x0003);   //Panel Interface Contral 3. 
 161   2              Write_Cmd_Data(0x95,0x0110);   //Frame Cycle Contral
 162   2              Write_Cmd_Data(0x97,0x0000);   // 
 163   2              Write_Cmd_Data(0x98,0x0000);   //Frame Cycle Contral.     
 164   2      
 165   2              //-------------- Display on ---------//
 166   2          Write_Cmd_Data(0x07,0x0173); 
 167   2      
 168   2              }
 169   1      
 170   1              else if(Device_code==0x1505 )
 171   1           {
 172   2      
 173   2          //************* Start Initial Sequence **********//
 174   2              Write_Cmd_Data(0x00,0x0001);   //Set the OSC bit as ‘1’ to start the internal oscillator
 175   2          Write_Cmd_Data(0x01,0x0100);   // set SS and SM bit
 176   2              Write_Cmd_Data(0x02,0x0700);   // set 1 line inversion
 177   2              Write_Cmd_Data(0x03,0x1030);   //set GRAM Write direction and BGR=1
 178   2          Write_Cmd_Data(0x04,0x0000);   // Resize register
 179   2              Write_Cmd_Data(0x08,0x0202);   // set the back porch and front porch
C51 COMPILER V9.52.0.0   INITLCD                                                           10/25/2013 16:20:27 PAGE 4   

 180   2          Write_Cmd_Data(0x09,0x0000);   // set non-display area refresh cycle ISC[3:0]
 181   2          Write_Cmd_Data(0x0A,0x0000);   // FMARK function
 182   2          Write_Cmd_Data(0x0C,0x0000);   // RGB interface setting
 183   2              Write_Cmd_Data(0x0D,0x0000);   // Frame marker Position
 184   2          Write_Cmd_Data(0x0F,0x0000);   // RGB interface polarity
 185   2          delayms(30);
 186   2              //*************Power On sequence ****************//
 187   2              Write_Cmd_Data(0x10, 0x16b0);   // SAP, BT[3:0], AP, DSTB, SLP, STB
 188   2              delayms(30);
 189   2              Write_Cmd_Data(0x11, 0x0007);   //Write final user’s setting values to VC bit
 190   2              Write_Cmd_Data(0x12, 0x013a);   // set Internal reference voltage
 191   2              Write_Cmd_Data(0x13, 0x1a00);   // VDV[4:0] for VCOM amplitude
 192   2          delayms(30);
 193   2          Write_Cmd_Data(0x29, 0x000c);   // Set VCM[5:0] for VCOMH
 194   2              delayms(30); // Delay 50ms
 195   2      
 196   2              // ----------- Adjust the Gamma Curve ----------//
 197   2              Write_Cmd_Data(0x0030, 0x0000);
 198   2              Write_Cmd_Data(0x0031, 0x0505);
 199   2              Write_Cmd_Data(0x0032, 0x0304);
 200   2              Write_Cmd_Data(0x0035, 0x0006);
 201   2              Write_Cmd_Data(0x0036, 0x0707);
 202   2              Write_Cmd_Data(0x0037, 0x0105);
 203   2              Write_Cmd_Data(0x0038, 0x0002);
 204   2              Write_Cmd_Data(0x0039, 0x0707);
 205   2              Write_Cmd_Data(0x003C, 0x0704);
 206   2              Write_Cmd_Data(0x003D, 0x0807);
 207   2      
 208   2              //------------------ Set GRAM area ---------------//
 209   2              Write_Cmd_Data(0x0050, 0x0000); // Horizontal GRAM Start Address
 210   2              Write_Cmd_Data(0x0051, 0x00EF); // Horizontal GRAM End Address
 211   2              Write_Cmd_Data(0x0052, 0x0000); // Vertical GRAM Start Address
 212   2              Write_Cmd_Data(0x0053, 0x013F); // Vertical GRAM Start Address
 213   2              Write_Cmd_Data(0x0060, 0x2700); // Gate Scan Line
 214   2              Write_Cmd_Data(0x0061, 0x0001); // NDL,VLE, REV
 215   2              Write_Cmd_Data(0x006A, 0x2700); // set scrolling line
 216   2          Write_Cmd_Data(0x20, 0x0000);   // GRAM horizontal Address
 217   2              Write_Cmd_Data(0x21, 0x0000);   // GRAM Vertical Address
 218   2      
 219   2              //-------------- Partial Display Control ---------//
 220   2              Write_Cmd_Data(0x0080, 0x0000);
 221   2              Write_Cmd_Data(0x0081, 0x0000);
 222   2              Write_Cmd_Data(0x0082, 0x0000);
 223   2              Write_Cmd_Data(0x0083, 0x0000);
 224   2              Write_Cmd_Data(0x0084, 0x0000);
 225   2              Write_Cmd_Data(0x0085, 0x0000);
 226   2      
 227   2              //-------------- Panel Control ---------//
 228   2          Write_Cmd_Data(0x90,0x0010);   //Frame Cycle Contral
 229   2              Write_Cmd_Data(0x92,0x0000);   //Panel Interface Contral
 230   2              Write_Cmd_Data(0x93,0x0003);   //Panel Interface Contral 3. 
 231   2              Write_Cmd_Data(0x95,0x0110);   //Frame Cycle Contral
 232   2              Write_Cmd_Data(0x97,0x0000);   // 
 233   2              Write_Cmd_Data(0x98,0x0000);   //Frame Cycle Contral.     
 234   2      
 235   2              //-------------- Display on ---------//
 236   2          Write_Cmd_Data(0x07,0x0173); 
 237   2      
 238   2              }
 239   1      
 240   1          else if(Device_code==0x9328)
 241   1           {
C51 COMPILER V9.52.0.0   INITLCD                                                           10/25/2013 16:20:27 PAGE 5   

 242   2      
 243   2          //************* Start Initial Sequence **********//
 244   2               Write_Cmd_Data(0x0001,0x0100);   //set SS and SM bit //设置扫描方向
 245   2          Write_Cmd_Data(0x0002,0x0700);   //EOR=1 and B/C=1 to set the line inversion  //设置行反转
 246   2          Write_Cmd_Data(0x0003,0x1038);   //set Entry Mode  //设置进入模式   
 247   2          Write_Cmd_Data(0x0004,0x0000);   //
 248   2          Write_Cmd_Data(0x00A4,0x0001);
 249   2          Write_Cmd_Data(0x0008,0x0202); // set the back porch and front porch
 250   2          Write_Cmd_Data(0x0009,0x0000); // set non-display area refresh cycle ISC[3:0]
 251   2          Write_Cmd_Data(0x000A,0x0000); // FMARK function
 252   2          Write_Cmd_Data(0x000C,0x0000); // RGB interface setting
 253   2          Write_Cmd_Data(0x000D, 0x0000); // Frame marker Position
 254   2          Write_Cmd_Data(0x000F, 0x0000); // RGB interface polarity
 255   2      
 256   2      
 257   2      
 258   2      //*************Power On sequence ****************//
 259   2          Write_Cmd_Data(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB 
 260   2          Write_Cmd_Data(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 261   2          Write_Cmd_Data(0x0012, 0x0000); // VREG1OUT voltage
 262   2          Write_Cmd_Data(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude 
 263   2          delayms(30);
 264   2          Write_Cmd_Data(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB 
 265   2          Write_Cmd_Data(0x0011, 0x0227); // R11h=0x0221 at VCI=3.3V, DC1[2:0], DC0[2:0], VC[2:0]
 266   2          delayms(30);
 267   2          Write_Cmd_Data(0x0012, 0x001C); // External reference voltage= Vci;
 268   2          delayms(30); 
 269   2          Write_Cmd_Data(0x0013, 0x1800); // R13=1200 when R12=009D;VDV[4:0] for VCOM amplitude
 270   2          Write_Cmd_Data(0x0029, 0x001C); // R29=000C when R12=009D;VCM[5:0] for VCOMH
 271   2          Write_Cmd_Data(0x002B, 0x000D); // Frame Rate = 91Hz
 272   2          delayms(30);    
 273   2          Write_Cmd_Data(0x0020, 0x0000); // GRAM horizontal Address
 274   2          Write_Cmd_Data(0x0021, 0x0000); // GRAM Vertical Address
 275   2      // ----------- Adjust the Gamma Curve ----------//               
 276   2              Write_Cmd_Data(0x0030, 0x0007);
 277   2              Write_Cmd_Data(0x0031, 0x0302);
 278   2          Write_Cmd_Data(0x0032, 0x0105);
 279   2              Write_Cmd_Data(0x0035, 0x0206);
 280   2          Write_Cmd_Data(0x0036, 0x0808);               
 281   2          Write_Cmd_Data(0x0037, 0x0206);
 282   2          Write_Cmd_Data(0x0038, 0x0504);
 283   2          Write_Cmd_Data(0x0039, 0x0007);
 284   2          Write_Cmd_Data(0x003C, 0x0105);
 285   2          Write_Cmd_Data(0x003D, 0x0808);
 286   2      //------------------ Set GRAM area ---------------//
 287   2          Write_Cmd_Data(0x0050, 0x0000); // Horizontal GRAM Start Address
 288   2          Write_Cmd_Data(0x0051, 0x00EF); // Horizontal GRAM End Address
 289   2          Write_Cmd_Data(0x0052, 0x0000); // Vertical GRAM Start Address
 290   2              delayms(30);
 291   2          Write_Cmd_Data(0x0053, 0x013F); // Vertical GRAM Start Address
 292   2              delayms(30);
 293   2          Write_Cmd_Data(0x0060, 0xA700); // Gate Scan Line
 294   2          Write_Cmd_Data(0x0061, 0x0001); // NDL,VLE, REV  
 295   2          Write_Cmd_Data(0x006A, 0x0000); // set scrolling line
 296   2      //-------------- Partial Display Control ---------//
 297   2          Write_Cmd_Data(0x0080, 0x0000);
 298   2          Write_Cmd_Data(0x0081, 0x0000);
 299   2          Write_Cmd_Data(0x0082,0x0000); 
 300   2          Write_Cmd_Data(0x0083,0x0000); 
 301   2          Write_Cmd_Data(0x0084,0x0000); 
 302   2          Write_Cmd_Data(0x0085,0x0000); 
 303   2      //-------------- Panel Control -------------------//        
C51 COMPILER V9.52.0.0   INITLCD                                                           10/25/2013 16:20:27 PAGE 6   

 304   2          Write_Cmd_Data(0x0090, 0x0010);
 305   2          Write_Cmd_Data(0x0092, 0x0000);
 306   2          Write_Cmd_Data(0x0093, 0x0003);
 307   2          Write_Cmd_Data(0x0095, 0x0110);
 308   2          Write_Cmd_Data(0x0097, 0x0000);
 309   2          Write_Cmd_Data(0x0098, 0x0000);
 310   2          Write_Cmd_Data(0x0007, 0x0133); // 262K color and display ON
 311   2      
 312   2              }
 313   1      }
 314          
 315          void LCD_SetPos(unsigned int x0,unsigned int x1,unsigned int y0,unsigned int y1)
 316          {
 317   1      
 318   1        Write_Cmd_Data(0x50,x0);  // Horizontal GRAM Start Address
 319   1        Write_Cmd_Data(0x51,x1);  // Horizontal GRAM End Address
 320   1        Write_Cmd_Data(0x52,y0);  // Vertical GRAM Start Address
 321   1        Write_Cmd_Data(0x53,y1);  // Vertical GRAM Start Address
 322   1        Write_Cmd_Data(0x20,x0);  // GRAM horizontal Address
 323   1        Write_Cmd_Data(0x21,y0);  // GRAM Vertical Address
 324   1        Write_Cmd (0x00,0x22);    // 0x0022,Start to Write Data to GRAM 
 325   1      }
 326          
 327          void CLR_Screen(unsigned int bColor)
 328          {
 329   1       unsigned int i,j;
 330   1       LCD_SetPos(0,240,0,320);//320x240
 331   1       for (i=0;i<320;i++)
 332   1              {
 333   2                 for (j=0;j<240;j++)
 334   2                     Write_Data_U16(bColor);
 335   2              }
 336   1      }
 337          
 338          void Put_pixel(unsigned int x, unsigned int y, unsigned int color)
 339          {
 340   1              LCD_SetPos(x, x, y, y);
 341   1              Write_Data_U16(color);
 342   1      }
 343          
 344          void Set_Color(uchar x, uint y, uchar length, uint high, uchar color)
 345          {
 346   1               uchar i, xi;
 347   1               uint  j, xj;
 348   1               xi =  x+length-1;
 349   1               xj =  y+high-1;
 350   1               LCD_SetPos(x, xi, y, xj);
 351   1               for(i = x; i < xi; i ++)
 352   1               {
 353   2                      for(j = y; j < xj; j ++)
 354   2                      {
 355   3                              Write_Data_U16(color);
 356   3                      }
 357   2               }
 358   1      }
 359          
 360          void circle(unsigned int x, unsigned int y, unsigned int r, unsigned int color)
 361          {
 362   1              unsigned int i;
 363   1              for(i = 0; i <= 360; i ++)
 364   1              {
 365   2                      Put_pixel(x + cos(i*PI/180)*r, y + sin(i*PI/180)*r, color);
C51 COMPILER V9.52.0.0   INITLCD                                                           10/25/2013 16:20:27 PAGE 7   

 366   2              }
 367   1      }
 368          
 369          void GUI_DisPicture(uchar x, uint y, uchar length, uint high ,const uchar *pic)
 370          //void GUI_DisPicture(uchar x, uint y, uchar length, uint high)
 371          {
 372   1          unsigned int temp=0,tmp=0,num=0;
 373   1              LCD_SetPos(x, x+length-1, y, y+high-1);
 374   1              num=length*high*2;
 375   1              do
 376   1              {  
 377   2                 //temp=pic[tmp]|( pic[tmp+1]<<8);
 378   2                 temp=pic[tmp+1];
 379   2                 temp=temp<<8;
 380   2                 temp=temp|pic[tmp];
 381   2                 Write_Data_U16(temp);//逐点显示
 382   2                 tmp+=2;
 383   2              }while(tmp<num);
 384   1      }
 385          
 386          void GUI_HLine(uchar x, uint y, uchar length, uint color) 
 387          {  
 388   1      //LCD_SetPos(x,y,x+length-1,y);
 389   1              //do
 390   1      //      {  
 391   1      //              Write_Data_U16(color);//逐点显示，描出水平线
 392   1      //              length--;
 393   1      //      }while(length);
 394   1              uchar i;
 395   1              for(i = x; i < length; i ++)
 396   1              {
 397   2                      Put_pixel(i, y, color);
 398   2              }
 399   1      }
 400          
 401          void GUI_VLine(uchar x, uint y, uchar length, uint color) 
 402          {  
 403   1              //LCD_SetPos(x,y,x+length-1,y);
 404   1              //do
 405   1      //      {  
 406   1      //              Write_Data_U16(color);//逐点显示，描出水平线
 407   1      //              length--;
 408   1      //      }while(length);
 409   1              uchar i;
 410   1              for(i = y; i < length; i ++)
 411   1              {
 412   2                      Put_pixel(x, i, color);
 413   2              }
 414   1      }
 415          
 416          
 417          /*void line(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int color)
 418          {
 419                  
 420          } */
 421          
 422          void Put_mych(unsigned short x, unsigned short  y,unsigned int width, unsigned int height,  const char myc
             -ode[], unsigned int fColor,unsigned int bColor)
 423          {
 424   1              unsigned int i, j; //, //k;
 425   1              unsigned int k;
 426   1              k = width*height/8;
C51 COMPILER V9.52.0.0   INITLCD                                                           10/25/2013 16:20:27 PAGE 8   

 427   1              LCD_SetPos(x,  x+width-1,y, y+height-1);
 428   1              for(i = 0; i < k; i ++)
 429   1              {
 430   2                      unsigned short m = mycode[i];
 431   2                      for(j = 0; j < 8; j ++)
 432   2                      {
 433   3                                 if((m&0x80) == 0x80)
 434   3                                 {
 435   4                                              Write_Data_U16(fColor);
 436   4                                 }
 437   3                                 else
 438   3                                 {
 439   4                                              Write_Data_U16(bColor);
 440   4                                 }
 441   3                                 m <<= 1;
 442   3                      }
 443   2              }
 444   1      }
 445          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1954    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      80
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
