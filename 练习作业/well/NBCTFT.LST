C51 COMPILER V9.52.0.0   NBCTFT                                                            11/08/2013 17:32:37 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE NBCTFT
OBJECT MODULE PLACED IN NBCTFT.OBJ
COMPILER INVOKED BY: E:\C51Keil\C51\BIN\C51.EXE NBCTFT.C BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*===================================================================================================  
   2          ÎÄ¼þ¹¦ÄÜÃèÊö£º320x240TFTÇý¶¯³ÌÐò£¬¿ØÖÆTFTÊµÏÖºº×Ö,×Ö·ûÏÔÊ¾,»­µã¹¦ÄÜ¡£
   3          Ó²¼þÁ¬½Ó£º  Çë×ÐÏ¸°´ÕÕÏÂÃæ½Ó¿ÚÁ¬Ïß£¬²¢×ÐÏ¸ºË¶Ô¡£
   4               ----------------------------------------
   5                1¡¢   ----2.6´çTFT½ÓÏß----------
   6                      D0~D7   ½ÓIOA8~IOA15
   7                                  EP      ½ÓIOB6
   8                          RWP     ½ÓIOB5
   9                                  A0      ½ÓIOB4
  10                                  /CS1    ½ÓIOB
  11               ----------------------------------------
  12                2¡¢   ----2.8´çTFT½ÓÏß----------
  13                      D0~D7   ½ÓIOA8~IOA15
  14                                  EP      ½ÓIOB6
  15                          RWP     ½ÓIOB5
  16                                  A0      ½ÓIOB4
  17                                  /CS1    ½ÓIOB
  18                   ----------------------------------------
  19          Î¬»¤¼ÇÂ¼£º  2012-3-14
  20          ====================================================================================================*/
  21          //******************°üº¬Í·ÎÄ¼þ***************************
  22          #include"NBCTFT.h"
  23          #include"reg52.h"
  24          
  25          //**************¿ØÖÆ¶Ë¿Ú¶¨Òå********************
  26          #define DataPort P0     //Êý¾Ý¿ÚÊ¹ÓÃDataPort
  27          
  28          sbit RS    =P2^5;               //Êý¾Ý/ÃüÁîÑ¡Ôñ
  29          sbit RW    =P2^4;       //Ð´Êý¾Ý/ÃüÁî
  30          sbit nRD   =P2^3;       //¶Á¿ØÖÆ
  31          sbit CS    =P2^2;               //Æ¬Ñ¡
  32          sbit RES   =P2^1;               //¸´Î»
  33          
  34          sbit LE    =P2^0;       //74HC573Ëø´æ¿ØÖÆ
  35          
  36          //**************ÉùÃ÷Íâ²¿º¯ÊýºÍ±äÁ¿**************
  37          
  38          extern unsigned int Device_code = 0x9328;
  39          
  40          
  41          //================================================================================================
  42          //      ÊµÏÖ¹¦ÄÜ£º      ÑÓÊ±
  43          //      ÊäÈë²ÎÊý£º      count ÉèÖÃÑÓÊ±Ê±¼ä
  44          //================================================================================================
  45          void delayms(unsigned int count)
  46          {
  47   1          int i,j;                                                                                
  48   1          for(i=0;i<count;i++)                                                                    
  49   1             {
  50   2                   for(j=0;j<255;j++);
  51   2             }                                                                                     
  52   1      }
  53          
  54          //================================================================================================
  55          //      ÊµÏÖ¹¦ÄÜ£º      Ð´ÃüÁî
C51 COMPILER V9.52.0.0   NBCTFT                                                            11/08/2013 17:32:37 PAGE 2   

  56          //      ÊäÈë²ÎÊý£º  DH ÐèÒªÊäÈë16bitsÃüÁîµÄ¸ß8Î»
  57          //              DL ÐèÒªÊäÈë16bitsÃüÁîµÄµÍ8Î»
  58          //================================================================================================
  59          void Write_Cmd(unsigned char DH,unsigned char DL)
  60          {
  61   1              CS=0;
  62   1              RS=0;
  63   1          nRD=1;
  64   1          RW=0;
  65   1      
  66   1          DataPort=DL;            //ËÍµÍ8Î»ÃüÁî¸ø573´ýËø´æ
  67   1          LE=1;                   //Ëø´æÎ»
  68   1          LE=0;                   //¶Ï¿ªËø´æ,Î»Ñ¡573µÄQ7~Q0ÈÔ±£³Ö 
  69   1      
  70   1              DataPort=DH;            //ËÍ¸ß8Î»ÃüÁî¸øTFT
  71   1              
  72   1              RW=1;
  73   1              CS=1;
  74   1      }
  75          
  76          
  77          //================================================================================================
  78          //      ÊµÏÖ¹¦ÄÜ£º      Ð´Êý¾Ý(2*8bits)
  79          //      ÊäÈë²ÎÊý£º  DH ÐèÒªÊäÈë16bitsÊý¾ÝµÄ¸ß8Î»
  80          //              DL ÐèÒªÊäÈë16bitsÊý¾ÝµÄµÍ8Î»
  81          //================================================================================================
  82          void Write_Data(unsigned char DH,unsigned char DL)
  83          {
  84   1              
  85   1              CS=0;
  86   1              RS=1;
  87   1              
  88   1              DataPort=DL;            //ËÍµÍ8Î»Êý¾Ý¸ø573´ýËø´æ
  89   1          LE=1;                   //Ëø´æÎ»
  90   1          LE=0;                   //¶Ï¿ªËø´æ,Î»Ñ¡573µÄQ7~Q0ÈÔ±£³Ö 
  91   1      
  92   1              DataPort=DH;            //ËÍ¸ß8Î»Êý¾Ý¸øTFT
  93   1              
  94   1              RW=0;
  95   1              RW=1;
  96   1              CS=1;
  97   1      }
  98          //================================================================================================
  99          //      ÊµÏÖ¹¦ÄÜ£º      Ð´Êý¾Ý(16Î»)
 100          //      ÊäÈë²ÎÊý£º  y ÐèÒªÊäÈë16bitsÊý¾Ý
 101          //================================================================================================
 102          void  Write_Data_U16(unsigned int y)
 103          {
 104   1              unsigned char m,n;
 105   1              m=y>>8;
 106   1              n=y;
 107   1              Write_Data(m,n);
 108   1      
 109   1      }
 110          
 111          //================================================================================================
 112          //      ÊµÏÖ¹¦ÄÜ£º      Ïòx¼Ä´æÆ÷Ð´ÈëyÊý¾Ý
 113          //      ÊäÈë²ÎÊý£º  x ÐèÒªÊäÈëµÄÃüÁî 16Î»
 114          //              y ÐèÒªÊäÈëµÄÊý¾Ý 16Î»
 115          //================================================================================================
 116          void  Write_Cmd_Data (unsigned char x,unsigned int y)
 117          {
C51 COMPILER V9.52.0.0   NBCTFT                                                            11/08/2013 17:32:37 PAGE 3   

 118   1              unsigned char m,n;
 119   1              m=y>>8;
 120   1              n=y;
 121   1              Write_Cmd(0x00,x);
 122   1              Write_Data(m,n);
 123   1      }
 124          
 125          //================================================================================================
 126          //      ÊµÏÖ¹¦ÄÜ£º      TFTÇåÆÁ
 127          //      ÊäÈë²ÎÊý£º      bColor ÇåÆÁËùÊ¹ÓÃµÄ±³¾°É«
 128          //================================================================================================
 129          void CLR_Screen(unsigned int bColor)
 130          {
 131   1       unsigned int i,j;
 132   1       LCD_SetPos(0,240,0,320);//320x240
 133   1       for (i=0;i<320;i++)
 134   1              {
 135   2                 for (j=0;j<240;j++)
 136   2                     Write_Data_U16(bColor);
 137   2              }
 138   1      }
 139          /*
 140          //================================================================================================
 141          //      ÊµÏÖ¹¦ÄÜ£º      ÏÔÊ¾Ascii×Ö·û
 142          //  ÊäÈë²ÎÊý£º  x ºá×ø±ê
 143          //              y ×Ý×ø±ê
 144          //                      c ÐèÒªÏÔÊ¾µÄ×Ö·û
 145          //                      fColor ×Ö·ûÑÕÉ«
 146          //                      bColor ×Ö·û±³¾°ÑÕÉ«
 147          //================================================================================================
 148          #include "Ascii_8x16.h"
 149          void LCD_PutChar(unsigned short x, unsigned short y, char c, unsigned int fColor, unsigned int bColor)
 150          {
 151           unsigned int i,j;
 152           LCD_SetPos(x,x+8-1,y,y+16-1);                    //ÉèÖÃ×Ö·ûÏÔÊ¾Î»ÖÃ
 153           for(i=0; i<16;i++) {                             //Ñ­»·Ð´Èë16×Ö½Ú£¬Ò»¸ö×Ö·ûÎª16×Ö½Ú
 154                          unsigned char m=Font8x16[(c-0x20)*16+i];  //ÌáÈ¡c×Ö·ûµÄµÚi¸ö×Ö½ÚÒÔ,c¼õÈ¥0x20ÊÇÓÉÓÚAsciiÂë¿âÖÐµÄ0~1f±»È¥µ
             -ô
 155                          for(j=0;j<8;j++) {                        //Ñ­»·Ð´Èë8Î»£¬Ò»¸ö×Ö½ÚÎª8Î»
 156                                  if((m&0x80)==0x80) {                  //ÅÐ¶Ï×î¸ßÎ»ÊÇ·ñÎª1
 157                                          Write_Data_U16(fColor);           //×î¸ßÎ»Îª1£¬Ð´Èë×Ö·ûÑÕÉ«
 158                                          }
 159                                  else {
 160                                          Write_Data_U16(bColor);           //×î¸ßÎ»Îª0£¬Ð´Èë±³¾°ÑÕÉ«
 161                                          }
 162                                  m<<=1;                                //×óÒÆ1Î»£¬×¼±¸Ð´ÏÂÒ»Î»
 163                                  }
 164                          }
 165          }
 166          
 167          //================================================================================================
 168          //      ÊµÏÖ¹¦ÄÜ£º      ÏÔÊ¾16x16ºº×Ö
 169          //  ÊäÈë²ÎÊý£º  x ºá×ø±ê
 170          //              y ×Ý×ø±ê
 171          //                      g ÐèÒªÏÔÊ¾µÄ×Ö·û±àÂë
 172          //                      fColor ×Ö·ûÑÕÉ«
 173          //                      bColor ×Ö·û±³¾°ÑÕÉ«
 174          //================================================================================================
 175          #include "chinese.h"    //°üº¬16*16ºº×Ö×ÖÄ£
 176          
 177          void Put16x16(unsigned short x, unsigned short  y, unsigned char g[2], unsigned int fColor,unsigned int bC
             -olor)
C51 COMPILER V9.52.0.0   NBCTFT                                                            11/08/2013 17:32:37 PAGE 4   

 178          {
 179                  unsigned int i,j,k;
 180          
 181                  LCD_SetPos(x,  x+16-1,y, y+16-1);                       //ÉèÖÃºº×ÖÏÔÊ¾Î»ÖÃ
 182          
 183                  for (k=0;k<64;k++)                                      //Ñ­»·64´Î£¬²éÑ¯ºº×Ö×ÖÄ£Î»ÖÃ
 184                  { 
 185                    if ((ch16[k].GBK[0]==g[0])&&(ch16[k].GBK[1]==g[1]))   //ÅÐ¶ÏµÚk¸öºº×ÖµÄ±àÂëÊÇ·ñÓëÊäÈëºº×Ög[2]ÏàµÈ
 186                    { 
 187                  for(i=0;i<32;i++)                                   //Èç¹ûÏàµÈ£¬¼ÈÒÑÕÒµ½´ýÏÔÊ¾×ÖÄ£Î»ÖÃ£¬Ñ­»·Ð´Èë32×Ö½
             -Ú
 188                          {
 189                            unsigned short m=ch16[k].hz16[i];                 //¶ÁÈ¡32×Ö½ÚÖÐµÄµÚi×Ö½Ú
 190                            for(j=0;j<8;j++)                                  //Ñ­»·Ð´Èë8Î»Êý¾Ý
 191                             {                                                
 192                                   if((m&0x80)==0x80) Write_Data_U16(fColor);     //ÅÐ¶Ï×î¸ßÎ»ÊÇ·ñÎª1,×î¸ßÎ»Îª1£¬Ð´Èë×Ö·ûÑÕÉ«
 193                                   else              Write_Data_U16(bColor);      //×î¸ßÎ»Îª0£¬Ð´Èë±³¾°ÑÕÉ«
 194                               m<<=1;                                         //×óÒÆ1Î»£¬×¼±¸Ð´ÏÂÒ»Î»
 195                         } 
 196                          }
 197                    }  
 198              }   
 199          }
 200          
 201          //================================================================================================
 202          //      ÊµÏÖ¹¦ÄÜ£º      ÏÔÊ¾ÖÐÓ¢ÎÄ×Ö·û´®
 203          //  ÊäÈë²ÎÊý£º  x ºá×ø±ê
 204          //              y ×Ý×ø±ê
 205          //                      *s ´ýÏÔÊ¾µÄ×Ö·û´®,ÀýÈçLCD_PutString(24,16,"123À¶Ð¾",White,Blue);¼´°Ñ"123À¶Ð¾"µÄµÚÒ»¸ö×Ö·ûµØÖ·¸
             -³¸øÖ¸Õë±äÁ¿s.
 206          //                      bColor ×Ö·û±³¾°ÑÕÉ«
 207          //================================================================================================
 208          void LCD_PutString(unsigned short x, unsigned short y, unsigned char *s, unsigned int fColor, unsigned int
             - bColor) 
 209          {
 210                   unsigned char l=0;                            //ÏÔÊ¾ÆÁÎ»ÖÃÔöÁ¿
 211               while(*s) 
 212                   {
 213                          if( *s < 0x80)                             //ÅÐ¶ÏsÖ¸ÏòµÄ×Ö·û´®ÖÐµÄÄ³×Ö·ûµÄ±àÂëÖµÊÇ·ñÐ¡ÓÚ128,Èç¹ûÐ¡ÓÚ,¼´Î
             -ªASCII×Ö·û
 214                              {
 215                                   LCD_PutChar(x+l*8,y,*s,fColor,bColor);//ÏÔÊ¾¸Ã×Ö·û
 216                               s++;l++;                              //Ö¸Õë¼Ó1,Î»ÖÃ¼Ó1
 217                                  }
 218                          else
 219                              {
 220                                   Put16x16(x+l*8,y,(unsigned char*)s,fColor,bColor);//ÏÔÊ¾¸Ãºº×Ö
 221                               s+=2;l+=2;                                        //ÒòÎªºº×ÖÎª±àÂëÎª2×Ö½Ú£¬Ö¸Õë¼Ó2,ÏÔÊ¾16x16ËùÒÔÎ»Ö
             -Ã¼Ó2
 222                                  }
 223                   }
 224          }
 225          */
 226          
 227          //================================================================================================
 228          //      ÊµÏÖ¹¦ÄÜ£º      TFT³õÊ¼»¯
 229          //================================================================================================
 230          void TFT_Initial(void)
 231          {  
 232   1      
 233   1          RES = 1;    
 234   1              delayms(1);                    // Delay 1ms 
C51 COMPILER V9.52.0.0   NBCTFT                                                            11/08/2013 17:32:37 PAGE 5   

 235   1              RES = 0;  
 236   1              delayms(10);                   // Delay 10ms            
 237   1              RES = 1;  
 238   1              delayms(50);                   // Delay 50 ms  
 239   1      
 240   1              if(Device_code==0x9320)
 241   1           {
 242   2      
 243   2          //************* Start Initial Sequence **********//
 244   2              Write_Cmd_Data(0x00,0x0001);   //Set the OSC bit as ¡®1¡¯ to start the internal oscillator
 245   2          Write_Cmd_Data(0x01,0x0100);   // set SS and SM bit
 246   2              Write_Cmd_Data(0x02,0x0700);   // set 1 line inversion
 247   2              Write_Cmd_Data(0x03,0x1030);   //set GRAM write direction and BGR=1
 248   2          Write_Cmd_Data(0x04,0x0000);   // Resize register
 249   2              Write_Cmd_Data(0x08,0x0202);   // set the back porch and front porch
 250   2          Write_Cmd_Data(0x09,0x0000);   // set non-display area refresh cycle ISC[3:0]
 251   2          Write_Cmd_Data(0x0A,0x0000);   // FMARK function
 252   2          Write_Cmd_Data(0x0C,0x0000);   // RGB interface setting
 253   2              Write_Cmd_Data(0x0D,0x0000);   // Frame marker Position
 254   2          Write_Cmd_Data(0x0F,0x0000);   // RGB interface polarity
 255   2          delayms(30);
 256   2              //*************Power On sequence ****************//
 257   2              Write_Cmd_Data(0x10, 0x16b0);   // SAP, BT[3:0], AP, DSTB, SLP, STB
 258   2              delayms(30);
 259   2              Write_Cmd_Data(0x11, 0x0007);   //Write final user¡¯s setting values to VC bit
 260   2              Write_Cmd_Data(0x12, 0x013a);   // set Internal reference voltage
 261   2              Write_Cmd_Data(0x13, 0x1a00);   // VDV[4:0] for VCOM amplitude
 262   2          delayms(30);
 263   2          Write_Cmd_Data(0x29, 0x000c);   // Set VCM[5:0] for VCOMH
 264   2              delayms(30); // Delay 50ms
 265   2      
 266   2              // ----------- Adjust the Gamma Curve ----------//
 267   2              Write_Cmd_Data(0x0030, 0x0000);
 268   2              Write_Cmd_Data(0x0031, 0x0505);
 269   2              Write_Cmd_Data(0x0032, 0x0304);
 270   2              Write_Cmd_Data(0x0035, 0x0006);
 271   2              Write_Cmd_Data(0x0036, 0x0707);
 272   2              Write_Cmd_Data(0x0037, 0x0105);
 273   2              Write_Cmd_Data(0x0038, 0x0002);
 274   2              Write_Cmd_Data(0x0039, 0x0707);
 275   2              Write_Cmd_Data(0x003C, 0x0704);
 276   2              Write_Cmd_Data(0x003D, 0x0807);
 277   2      
 278   2              //------------------ Set GRAM area ---------------//
 279   2              Write_Cmd_Data(0x0050, 0x0000); // Horizontal GRAM Start Address
 280   2              Write_Cmd_Data(0x0051, 0x00EF); // Horizontal GRAM End Address
 281   2              Write_Cmd_Data(0x0052, 0x0000); // Vertical GRAM Start Address
 282   2              Write_Cmd_Data(0x0053, 0x013F); // Vertical GRAM Start Address
 283   2              Write_Cmd_Data(0x0060, 0x2700); // Gate Scan Line
 284   2              Write_Cmd_Data(0x0061, 0x0001); // NDL,VLE, REV
 285   2              Write_Cmd_Data(0x006A, 0x0000); // set scrolling line
 286   2          Write_Cmd_Data(0x20, 0x0000);   // GRAM horizontal Address
 287   2              Write_Cmd_Data(0x21, 0x0000);   // GRAM Vertical Address
 288   2      
 289   2              //-------------- Partial Display Control ---------//
 290   2              Write_Cmd_Data(0x0080, 0x0000);
 291   2              Write_Cmd_Data(0x0081, 0x0000);
 292   2              Write_Cmd_Data(0x0082, 0x0000);
 293   2              Write_Cmd_Data(0x0083, 0x0000);
 294   2              Write_Cmd_Data(0x0084, 0x0000);
 295   2              Write_Cmd_Data(0x0085, 0x0000);
 296   2      
C51 COMPILER V9.52.0.0   NBCTFT                                                            11/08/2013 17:32:37 PAGE 6   

 297   2              //-------------- Panel Control ---------//
 298   2          Write_Cmd_Data(0x90,0x0010);   //Frame Cycle Contral
 299   2              Write_Cmd_Data(0x92,0x0000);   //Panel Interface Contral
 300   2              Write_Cmd_Data(0x93,0x0003);   //Panel Interface Contral 3. 
 301   2              Write_Cmd_Data(0x95,0x0110);   //Frame Cycle Contral
 302   2              Write_Cmd_Data(0x97,0x0000);   // 
 303   2              Write_Cmd_Data(0x98,0x0000);   //Frame Cycle Contral.     
 304   2      
 305   2              //-------------- Display on ---------//
 306   2          Write_Cmd_Data(0x07,0x0173); 
 307   2      
 308   2              }
 309   1      
 310   1              else if(Device_code==0x1505 )
 311   1           {
 312   2      
 313   2          //************* Start Initial Sequence **********//
 314   2              Write_Cmd_Data(0x00,0x0001);   //Set the OSC bit as ¡®1¡¯ to start the internal oscillator
 315   2          Write_Cmd_Data(0x01,0x0100);   // set SS and SM bit
 316   2              Write_Cmd_Data(0x02,0x0700);   // set 1 line inversion
 317   2              Write_Cmd_Data(0x03,0x1030);   //set GRAM write direction and BGR=1
 318   2          Write_Cmd_Data(0x04,0x0000);   // Resize register
 319   2              Write_Cmd_Data(0x08,0x0202);   // set the back porch and front porch
 320   2          Write_Cmd_Data(0x09,0x0000);   // set non-display area refresh cycle ISC[3:0]
 321   2          Write_Cmd_Data(0x0A,0x0000);   // FMARK function
 322   2          Write_Cmd_Data(0x0C,0x0000);   // RGB interface setting
 323   2              Write_Cmd_Data(0x0D,0x0000);   // Frame marker Position
 324   2          Write_Cmd_Data(0x0F,0x0000);   // RGB interface polarity
 325   2          delayms(30);
 326   2              //*************Power On sequence ****************//
 327   2              Write_Cmd_Data(0x10, 0x16b0);   // SAP, BT[3:0], AP, DSTB, SLP, STB
 328   2              delayms(30);
 329   2              Write_Cmd_Data(0x11, 0x0007);   //Write final user¡¯s setting values to VC bit
 330   2              Write_Cmd_Data(0x12, 0x013a);   // set Internal reference voltage
 331   2              Write_Cmd_Data(0x13, 0x1a00);   // VDV[4:0] for VCOM amplitude
 332   2          delayms(30);
 333   2          Write_Cmd_Data(0x29, 0x000c);   // Set VCM[5:0] for VCOMH
 334   2              delayms(30); // Delay 50ms
 335   2      
 336   2              // ----------- Adjust the Gamma Curve ----------//
 337   2              Write_Cmd_Data(0x0030, 0x0000);
 338   2              Write_Cmd_Data(0x0031, 0x0505);
 339   2              Write_Cmd_Data(0x0032, 0x0304);
 340   2              Write_Cmd_Data(0x0035, 0x0006);
 341   2              Write_Cmd_Data(0x0036, 0x0707);
 342   2              Write_Cmd_Data(0x0037, 0x0105);
 343   2              Write_Cmd_Data(0x0038, 0x0002);
 344   2              Write_Cmd_Data(0x0039, 0x0707);
 345   2              Write_Cmd_Data(0x003C, 0x0704);
 346   2              Write_Cmd_Data(0x003D, 0x0807);
 347   2      
 348   2              //------------------ Set GRAM area ---------------//
 349   2              Write_Cmd_Data(0x0050, 0x0000); // Horizontal GRAM Start Address
 350   2              Write_Cmd_Data(0x0051, 0x00EF); // Horizontal GRAM End Address
 351   2              Write_Cmd_Data(0x0052, 0x0000); // Vertical GRAM Start Address
 352   2              Write_Cmd_Data(0x0053, 0x013F); // Vertical GRAM Start Address
 353   2              Write_Cmd_Data(0x0060, 0x2700); // Gate Scan Line
 354   2              Write_Cmd_Data(0x0061, 0x0001); // NDL,VLE, REV
 355   2              Write_Cmd_Data(0x006A, 0x2700); // set scrolling line
 356   2          Write_Cmd_Data(0x20, 0x0000);   // GRAM horizontal Address
 357   2              Write_Cmd_Data(0x21, 0x0000);   // GRAM Vertical Address
 358   2      
C51 COMPILER V9.52.0.0   NBCTFT                                                            11/08/2013 17:32:37 PAGE 7   

 359   2              //-------------- Partial Display Control ---------//
 360   2              Write_Cmd_Data(0x0080, 0x0000);
 361   2              Write_Cmd_Data(0x0081, 0x0000);
 362   2              Write_Cmd_Data(0x0082, 0x0000);
 363   2              Write_Cmd_Data(0x0083, 0x0000);
 364   2              Write_Cmd_Data(0x0084, 0x0000);
 365   2              Write_Cmd_Data(0x0085, 0x0000);
 366   2      
 367   2              //-------------- Panel Control ---------//
 368   2          Write_Cmd_Data(0x90,0x0010);   //Frame Cycle Contral
 369   2              Write_Cmd_Data(0x92,0x0000);   //Panel Interface Contral
 370   2              Write_Cmd_Data(0x93,0x0003);   //Panel Interface Contral 3. 
 371   2              Write_Cmd_Data(0x95,0x0110);   //Frame Cycle Contral
 372   2              Write_Cmd_Data(0x97,0x0000);   // 
 373   2              Write_Cmd_Data(0x98,0x0000);   //Frame Cycle Contral.     
 374   2      
 375   2              //-------------- Display on ---------//
 376   2          Write_Cmd_Data(0x07,0x0173); 
 377   2      
 378   2              }
 379   1      
 380   1          else if(Device_code==0x9328)
 381   1           {
 382   2      
 383   2          //************* Start Initial Sequence **********//
 384   2               Write_Cmd_Data(0x0001,0x0100);   //set SS and SM bit //ÉèÖÃÉ¨Ãè·½Ïò
 385   2          Write_Cmd_Data(0x0002,0x0700);   //EOR=1 and B/C=1 to set the line inversion  //ÉèÖÃÐÐ·´×ª
 386   2          Write_Cmd_Data(0x0003,0x1038);   //set Entry Mode  //ÉèÖÃ½øÈëÄ£Ê½   
 387   2          Write_Cmd_Data(0x0004,0x0000);   //
 388   2          Write_Cmd_Data(0x00A4,0x0001);
 389   2          Write_Cmd_Data(0x0008,0x0202); // set the back porch and front porch
 390   2          Write_Cmd_Data(0x0009,0x0000); // set non-display area refresh cycle ISC[3:0]
 391   2          Write_Cmd_Data(0x000A,0x0000); // FMARK function
 392   2          Write_Cmd_Data(0x000C,0x0000); // RGB interface setting
 393   2          Write_Cmd_Data(0x000D, 0x0000); // Frame marker Position
 394   2          Write_Cmd_Data(0x000F, 0x0000); // RGB interface polarity
 395   2      
 396   2      
 397   2      
 398   2      //*************Power On sequence ****************//
 399   2          Write_Cmd_Data(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB 
 400   2          Write_Cmd_Data(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 401   2          Write_Cmd_Data(0x0012, 0x0000); // VREG1OUT voltage
 402   2          Write_Cmd_Data(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude 
 403   2          delayms(30);
 404   2          Write_Cmd_Data(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB 
 405   2          Write_Cmd_Data(0x0011, 0x0227); // R11h=0x0221 at VCI=3.3V, DC1[2:0], DC0[2:0], VC[2:0]
 406   2          delayms(30);
 407   2          Write_Cmd_Data(0x0012, 0x001C); // External reference voltage= Vci;
 408   2          delayms(30); 
 409   2          Write_Cmd_Data(0x0013, 0x1800); // R13=1200 when R12=009D;VDV[4:0] for VCOM amplitude
 410   2          Write_Cmd_Data(0x0029, 0x001C); // R29=000C when R12=009D;VCM[5:0] for VCOMH
 411   2          Write_Cmd_Data(0x002B, 0x000D); // Frame Rate = 91Hz
 412   2          delayms(30);    
 413   2          Write_Cmd_Data(0x0020, 0x0000); // GRAM horizontal Address
 414   2          Write_Cmd_Data(0x0021, 0x0000); // GRAM Vertical Address
 415   2      // ----------- Adjust the Gamma Curve ----------//               
 416   2              Write_Cmd_Data(0x0030, 0x0007);
 417   2              Write_Cmd_Data(0x0031, 0x0302);
 418   2          Write_Cmd_Data(0x0032, 0x0105);
 419   2              Write_Cmd_Data(0x0035, 0x0206);
 420   2          Write_Cmd_Data(0x0036, 0x0808);               
C51 COMPILER V9.52.0.0   NBCTFT                                                            11/08/2013 17:32:37 PAGE 8   

 421   2          Write_Cmd_Data(0x0037, 0x0206);
 422   2          Write_Cmd_Data(0x0038, 0x0504);
 423   2          Write_Cmd_Data(0x0039, 0x0007);
 424   2          Write_Cmd_Data(0x003C, 0x0105);
 425   2          Write_Cmd_Data(0x003D, 0x0808);
 426   2      //------------------ Set GRAM area ---------------//
 427   2          Write_Cmd_Data(0x0050, 0x0000); // Horizontal GRAM Start Address
 428   2          Write_Cmd_Data(0x0051, 0x00EF); // Horizontal GRAM End Address
 429   2          Write_Cmd_Data(0x0052, 0x0000); // Vertical GRAM Start Address
 430   2              delayms(30);
 431   2          Write_Cmd_Data(0x0053, 0x013F); // Vertical GRAM Start Address
 432   2              delayms(30);
 433   2          Write_Cmd_Data(0x0060, 0x2700); // Gate Scan Line
 434   2          Write_Cmd_Data(0x0061, 0x0001); // NDL,VLE, REV  
 435   2          Write_Cmd_Data(0x006A, 0x0000); // set scrolling line
 436   2      //-------------- Partial Display Control ---------//
 437   2          Write_Cmd_Data(0x0080, 0x0000);
 438   2          Write_Cmd_Data(0x0081, 0x0000);
 439   2          Write_Cmd_Data(0x0082,0x0000); 
 440   2          Write_Cmd_Data(0x0083,0x0000); 
 441   2          Write_Cmd_Data(0x0084,0x0000); 
 442   2          Write_Cmd_Data(0x0085,0x0000); 
 443   2      //-------------- Panel Control -------------------//        
 444   2          Write_Cmd_Data(0x0090, 0x0010);
 445   2          Write_Cmd_Data(0x0092, 0x0000);
 446   2          Write_Cmd_Data(0x0093, 0x0003);
 447   2          Write_Cmd_Data(0x0095, 0x0110);
 448   2          Write_Cmd_Data(0x0097, 0x0000);
 449   2          Write_Cmd_Data(0x0098, 0x0000);
 450   2          Write_Cmd_Data(0x0007, 0x0133); // 262K color and display ON
 451   2      
 452   2              }
 453   1      }
 454          
 455          //================================================================================================
 456          //      ÊµÏÖ¹¦ÄÜ£º      ÉèÖÃ×ø±ê
 457          //  ÊäÈë²ÎÊý£º  x0£¬y0 ÆðÊ¼×ø±ê
 458          //              x1£¬y1 ½áÊø×ø±ê
 459          //================================================================================================
 460          void LCD_SetPos(unsigned int x0,unsigned int x1,unsigned int y0,unsigned int y1)
 461          {
 462   1      
 463   1        Write_Cmd_Data(0x50,x0);  // Horizontal GRAM Start Address
 464   1        Write_Cmd_Data(0x51,x1);  // Horizontal GRAM End Address
 465   1        Write_Cmd_Data(0x52,y0);  // Vertical GRAM Start Address
 466   1        Write_Cmd_Data(0x53,y1);  // Vertical GRAM Start Address
 467   1        Write_Cmd_Data(0x20,x0);  // GRAM horizontal Address
 468   1        Write_Cmd_Data(0x21,y0);  // GRAM Vertical Address
 469   1        Write_Cmd (0x00,0x22);    // 0x0022,Start to Write Data to GRAM 
 470   1      }
 471          /*
 472          //================================================================================================
 473          //      ÊµÏÖ¹¦ÄÜ£º      »­µã
 474          //  ÊäÈë²ÎÊý£º  x£¬y ÐèÒª»­µã×ø±ê
 475          //              color µãµÄÑÕÉ«
 476          //================================================================================================
 477          
 478          */
 479          void Put_pixel(unsigned int x,unsigned int y,unsigned int color)
 480          {
 481   1              //LCD_SetPos(x,x,y,y);
 482   1          LCD_SetPos(y,y,x,x);
C51 COMPILER V9.52.0.0   NBCTFT                                                            11/08/2013 17:32:37 PAGE 9   

 483   1              Write_Data_U16(color);
 484   1      }
 485          
 486          
 487          
 488          void Put_mych(unsigned short x, unsigned short y, unsigned int width, unsigned int height, const char myco
             -de[], unsigned int fColor)
 489          {
 490   1          unsigned int i, j;
 491   1          unsigned int k, l;
 492   1          
 493   1          k = width*height/8;
 494   1          l = width/8;
 495   1          
 496   1          for(i = 0; i < k; i ++) {
 497   2              unsigned short m = mycode[i];
 498   2              for(j = 0; j < 8; j ++) {
 499   3                  if((m&0x80) == 0x80) {
 500   4                      LCD_SetPos(y+i/l, y+i/l, x+i%l*8+j, x+i%l*8+j);
 501   4                      Write_Data_U16(fColor);
 502   4                  }
 503   3                  m <<= 1;
 504   3              }
 505   2          }
 506   1      }
 507          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1466    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      35
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
