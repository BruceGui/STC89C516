C51 COMPILER V8.05a   INIT                                                                 05/31/2013 15:49:41 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE INIT
OBJECT MODULE PLACED IN init.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE init.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          #include "init.h"
   3          #include "num.h"
   4          
   5          #define DataPort P0
   6          
   7          sbit RS = P2^5;
   8          sbit RW = P2^4;
   9          sbit nRD = P2^3;
  10          sbit CS = P2^2;
  11          sbit RES = P2^1;
  12          sbit LE = P2^0;
  13          
  14          extern uint Device_code;
  15          
  16          void init_Timer()
  17          {
  18   1              TMOD = 0x10;
  19   1              TH1 = 0xEC;
  20   1              TL1 = 0x77;
  21   1              IE = 0x88;
  22   1              TR1 = 1;
  23   1      }
  24          
  25          void delayms(uint count)
  26          {
  27   1              uint i, j;
  28   1              for(i = 0; i < count; i ++)
  29   1              {
  30   2                      for(j = 0; j < 255; j ++);
  31   2              }
  32   1      }
  33          
  34          void Write_Cmd(uchar DH, uchar DL)
  35          {       
  36   1              CS=0;
  37   1              RS=0;
  38   1          nRD=1;
  39   1          RW=0;
  40   1      
  41   1          //注意：当使用8位数据口驱动16位数据模式时，使用74HC573作为IO扩展，程序如下
  42   1          DataPort=DL;            //送低8位命令给573待锁存
  43   1          LE=1;                   //锁存位
  44   1          LE=0;                   //断开锁存,位选573的Q7~Q0仍保持 
  45   1      
  46   1              DataPort=DH;            //送高8位命令给TFT
  47   1      
  48   1              /*
  49   1          //如果使用16位数据口驱动16位数据模式，则无需IO扩展，直接将数据送到数据口即可
  50   1          DataPort_L=DL; 
  51   1          DataPort_H=DH;
  52   1              */
  53   1      
  54   1              RW=1;
  55   1              CS=1;
C51 COMPILER V8.05a   INIT                                                                 05/31/2013 15:49:41 PAGE 2   

  56   1      }
  57          
  58          void Write_Data(uchar DH, uchar DL)
  59          {
  60   1              
  61   1              CS=0;
  62   1              RS=1;
  63   1      
  64   1          //注意：当使用8位数据口驱动16位数据模式时，使用74HC573作为IO扩展，程序如下
  65   1              DataPort=DL;            //送低8位数据给573待锁存
  66   1          LE=1;                   //锁存位
  67   1          LE=0;                   //断开锁存,位选573的Q7~Q0仍保持 
  68   1      
  69   1              DataPort=DH;            //送高8位数据给TFT
  70   1      
  71   1              /*
  72   1          //如果使用16位数据口驱动16位数据模式，则无需IO扩展，直接将数据送到数据口即可
  73   1          DataPort_L=DL; 
  74   1          DataPort_H=DH;
  75   1              */
  76   1      
  77   1              RW=0;
  78   1              RW=1;
  79   1              CS=1;
  80   1      }
  81          
  82          void Write_Data_U16(uint x)
  83          {
  84   1              uchar m, n;
  85   1              m = x>>8;
  86   1              n = x;
  87   1              Write_Data(m, n);
  88   1      }
  89          
  90          void Write_Cmd_Data(uchar x, uint y)
  91          {
  92   1              uchar m, n;
  93   1              m = y>>8;
  94   1              n = y;
  95   1              Write_Cmd(0x00, x);
  96   1              Write_Data(m, n);
  97   1      }
  98          
  99          void init_LCD()
 100          {
 101   1              RES = 1;    
 102   1              delayms(1);                    // Delay 1ms 
 103   1              RES = 0;  
 104   1              delayms(10);                   // Delay 10ms            
 105   1              RES = 1;  
 106   1              delayms(50);                   // Delay 50 ms  
 107   1        
 108   1              if(Device_code==0x9320)
 109   1           {
 110   2      
 111   2          //************* Start Initial Sequence **********//
 112   2              Write_Cmd_Data(0x00,0x0001);   //Set the OSC bit as ‘1’ to start the internal oscillator
 113   2          Write_Cmd_Data(0x01,0x0100);   // set SS and SM bit
 114   2              Write_Cmd_Data(0x02,0x0700);   // set 1 line inversion
 115   2              Write_Cmd_Data(0x03,0x1030);   //set GRAM Write direction and BGR=1
 116   2          Write_Cmd_Data(0x04,0x0000);   // Resize register
 117   2              Write_Cmd_Data(0x08,0x0202);   // set the back porch and front porch
C51 COMPILER V8.05a   INIT                                                                 05/31/2013 15:49:41 PAGE 3   

 118   2          Write_Cmd_Data(0x09,0x0000);   // set non-display area refresh cycle ISC[3:0]
 119   2          Write_Cmd_Data(0x0A,0x0000);   // FMARK function
 120   2          Write_Cmd_Data(0x0C,0x0000);   // RGB interface setting
 121   2              Write_Cmd_Data(0x0D,0x0000);   // Frame marker Position
 122   2          Write_Cmd_Data(0x0F,0x0000);   // RGB interface polarity
 123   2          delayms(30);
 124   2              //*************Power On sequence ****************//
 125   2              Write_Cmd_Data(0x10, 0x16b0);   // SAP, BT[3:0], AP, DSTB, SLP, STB
 126   2              delayms(30);
 127   2              Write_Cmd_Data(0x11, 0x0007);   //Write final user’s setting values to VC bit
 128   2              Write_Cmd_Data(0x12, 0x013a);   // set Internal reference voltage
 129   2              Write_Cmd_Data(0x13, 0x1a00);   // VDV[4:0] for VCOM amplitude
 130   2          delayms(30);
 131   2          Write_Cmd_Data(0x29, 0x000c);   // Set VCM[5:0] for VCOMH
 132   2              delayms(30); // Delay 50ms
 133   2      
 134   2              // ----------- Adjust the Gamma Curve ----------//
 135   2              Write_Cmd_Data(0x0030, 0x0000);
 136   2              Write_Cmd_Data(0x0031, 0x0505);
 137   2              Write_Cmd_Data(0x0032, 0x0304);
 138   2              Write_Cmd_Data(0x0035, 0x0006);
 139   2              Write_Cmd_Data(0x0036, 0x0707);
 140   2              Write_Cmd_Data(0x0037, 0x0105);
 141   2              Write_Cmd_Data(0x0038, 0x0002);
 142   2              Write_Cmd_Data(0x0039, 0x0707);
 143   2              Write_Cmd_Data(0x003C, 0x0704);
 144   2              Write_Cmd_Data(0x003D, 0x0807);
 145   2      
 146   2              //------------------ Set GRAM area ---------------//
 147   2              Write_Cmd_Data(0x0050, 0x0000); // Horizontal GRAM Start Address
 148   2              Write_Cmd_Data(0x0051, 0x00EF); // Horizontal GRAM End Address
 149   2              Write_Cmd_Data(0x0052, 0x0000); // Vertical GRAM Start Address
 150   2              Write_Cmd_Data(0x0053, 0x013F); // Vertical GRAM Start Address
 151   2              Write_Cmd_Data(0x0060, 0x2700); // Gate Scan Line
 152   2              Write_Cmd_Data(0x0061, 0x0001); // NDL,VLE, REV
 153   2              Write_Cmd_Data(0x006A, 0x0000); // set scrolling line
 154   2          Write_Cmd_Data(0x20, 0x0000);   // GRAM horizontal Address
 155   2              Write_Cmd_Data(0x21, 0x0000);   // GRAM Vertical Address
 156   2      
 157   2              //-------------- Partial Display Control ---------//
 158   2              Write_Cmd_Data(0x0080, 0x0000);
 159   2              Write_Cmd_Data(0x0081, 0x0000);
 160   2              Write_Cmd_Data(0x0082, 0x0000);
 161   2              Write_Cmd_Data(0x0083, 0x0000);
 162   2              Write_Cmd_Data(0x0084, 0x0000);
 163   2              Write_Cmd_Data(0x0085, 0x0000);
 164   2      
 165   2              //-------------- Panel Control ---------//
 166   2          Write_Cmd_Data(0x90,0x0010);   //Frame Cycle Contral
 167   2              Write_Cmd_Data(0x92,0x0000);   //Panel Interface Contral
 168   2              Write_Cmd_Data(0x93,0x0003);   //Panel Interface Contral 3. 
 169   2              Write_Cmd_Data(0x95,0x0110);   //Frame Cycle Contral
 170   2              Write_Cmd_Data(0x97,0x0000);   // 
 171   2              Write_Cmd_Data(0x98,0x0000);   //Frame Cycle Contral.     
 172   2      
 173   2              //-------------- Display on ---------//
 174   2          Write_Cmd_Data(0x07,0x0173); 
 175   2      
 176   2              }
 177   1      
 178   1              else if(Device_code==0x1505 )
 179   1           {
C51 COMPILER V8.05a   INIT                                                                 05/31/2013 15:49:41 PAGE 4   

 180   2      
 181   2          //************* Start Initial Sequence **********//
 182   2              Write_Cmd_Data(0x00,0x0001);   //Set the OSC bit as ‘1’ to start the internal oscillator
 183   2          Write_Cmd_Data(0x01,0x0100);   // set SS and SM bit
 184   2              Write_Cmd_Data(0x02,0x0700);   // set 1 line inversion
 185   2              Write_Cmd_Data(0x03,0x1030);   //set GRAM Write direction and BGR=1
 186   2          Write_Cmd_Data(0x04,0x0000);   // Resize register
 187   2              Write_Cmd_Data(0x08,0x0202);   // set the back porch and front porch
 188   2          Write_Cmd_Data(0x09,0x0000);   // set non-display area refresh cycle ISC[3:0]
 189   2          Write_Cmd_Data(0x0A,0x0000);   // FMARK function
 190   2          Write_Cmd_Data(0x0C,0x0000);   // RGB interface setting
 191   2              Write_Cmd_Data(0x0D,0x0000);   // Frame marker Position
 192   2          Write_Cmd_Data(0x0F,0x0000);   // RGB interface polarity
 193   2          delayms(30);
 194   2              //*************Power On sequence ****************//
 195   2              Write_Cmd_Data(0x10, 0x16b0);   // SAP, BT[3:0], AP, DSTB, SLP, STB
 196   2              delayms(30);
 197   2              Write_Cmd_Data(0x11, 0x0007);   //Write final user’s setting values to VC bit
 198   2              Write_Cmd_Data(0x12, 0x013a);   // set Internal reference voltage
 199   2              Write_Cmd_Data(0x13, 0x1a00);   // VDV[4:0] for VCOM amplitude
 200   2          delayms(30);
 201   2          Write_Cmd_Data(0x29, 0x000c);   // Set VCM[5:0] for VCOMH
 202   2              delayms(30); // Delay 50ms
 203   2      
 204   2              // ----------- Adjust the Gamma Curve ----------//
 205   2              Write_Cmd_Data(0x0030, 0x0000);
 206   2              Write_Cmd_Data(0x0031, 0x0505);
 207   2              Write_Cmd_Data(0x0032, 0x0304);
 208   2              Write_Cmd_Data(0x0035, 0x0006);
 209   2              Write_Cmd_Data(0x0036, 0x0707);
 210   2              Write_Cmd_Data(0x0037, 0x0105);
 211   2              Write_Cmd_Data(0x0038, 0x0002);
 212   2              Write_Cmd_Data(0x0039, 0x0707);
 213   2              Write_Cmd_Data(0x003C, 0x0704);
 214   2              Write_Cmd_Data(0x003D, 0x0807);
 215   2      
 216   2              //------------------ Set GRAM area ---------------//
 217   2              Write_Cmd_Data(0x0050, 0x0000); // Horizontal GRAM Start Address
 218   2              Write_Cmd_Data(0x0051, 0x00EF); // Horizontal GRAM End Address
 219   2              Write_Cmd_Data(0x0052, 0x0000); // Vertical GRAM Start Address
 220   2              Write_Cmd_Data(0x0053, 0x013F); // Vertical GRAM Start Address
 221   2              Write_Cmd_Data(0x0060, 0x2700); // Gate Scan Line
 222   2              Write_Cmd_Data(0x0061, 0x0001); // NDL,VLE, REV
 223   2              Write_Cmd_Data(0x006A, 0x2700); // set scrolling line
 224   2          Write_Cmd_Data(0x20, 0x0000);   // GRAM horizontal Address
 225   2              Write_Cmd_Data(0x21, 0x0000);   // GRAM Vertical Address
 226   2      
 227   2              //-------------- Partial Display Control ---------//
 228   2              Write_Cmd_Data(0x0080, 0x0000);
 229   2              Write_Cmd_Data(0x0081, 0x0000);
 230   2              Write_Cmd_Data(0x0082, 0x0000);
 231   2              Write_Cmd_Data(0x0083, 0x0000);
 232   2              Write_Cmd_Data(0x0084, 0x0000);
 233   2              Write_Cmd_Data(0x0085, 0x0000);
 234   2      
 235   2              //-------------- Panel Control ---------//
 236   2          Write_Cmd_Data(0x90,0x0010);   //Frame Cycle Contral
 237   2              Write_Cmd_Data(0x92,0x0000);   //Panel Interface Contral
 238   2              Write_Cmd_Data(0x93,0x0003);   //Panel Interface Contral 3. 
 239   2              Write_Cmd_Data(0x95,0x0110);   //Frame Cycle Contral
 240   2              Write_Cmd_Data(0x97,0x0000);   // 
 241   2              Write_Cmd_Data(0x98,0x0000);   //Frame Cycle Contral.     
C51 COMPILER V8.05a   INIT                                                                 05/31/2013 15:49:41 PAGE 5   

 242   2      
 243   2              //-------------- Display on ---------//
 244   2          Write_Cmd_Data(0x07,0x0173); 
 245   2      
 246   2              }
 247   1      
 248   1          else if(Device_code==0x9328)
 249   1           {
 250   2      
 251   2          //************* Start Initial Sequence **********//
 252   2               Write_Cmd_Data(0x0001,0x0100);   //set SS and SM bit //设置扫描方向
 253   2          Write_Cmd_Data(0x0002,0x0700);   //EOR=1 and B/C=1 to set the line inversion  //设置行反转
 254   2          Write_Cmd_Data(0x0003,0x1030);   //set Entry Mode  //设置进入模式   
 255   2          Write_Cmd_Data(0x0004,0x0000);   //
 256   2          Write_Cmd_Data(0x00A4,0x0001);
 257   2          Write_Cmd_Data(0x0008,0x0202); // set the back porch and front porch
 258   2          Write_Cmd_Data(0x0009,0x0000); // set non-display area refresh cycle ISC[3:0]
 259   2          Write_Cmd_Data(0x000A,0x0000); // FMARK function
 260   2          Write_Cmd_Data(0x000C,0x0000); // RGB interface setting
 261   2          Write_Cmd_Data(0x000D, 0x0000); // Frame marker Position
 262   2          Write_Cmd_Data(0x000F, 0x0000); // RGB interface polarity
 263   2      
 264   2      
 265   2      
 266   2      //*************Power On sequence ****************//
 267   2          Write_Cmd_Data(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB 
 268   2          Write_Cmd_Data(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 269   2          Write_Cmd_Data(0x0012, 0x0000); // VREG1OUT voltage
 270   2          Write_Cmd_Data(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude 
 271   2          delayms(30);
 272   2          Write_Cmd_Data(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB 
 273   2          Write_Cmd_Data(0x0011, 0x0227); // R11h=0x0221 at VCI=3.3V, DC1[2:0], DC0[2:0], VC[2:0]
 274   2          delayms(30);
 275   2          Write_Cmd_Data(0x0012, 0x001C); // External reference voltage= Vci;
 276   2          delayms(30); 
 277   2          Write_Cmd_Data(0x0013, 0x1800); // R13=1200 when R12=009D;VDV[4:0] for VCOM amplitude
 278   2          Write_Cmd_Data(0x0029, 0x001C); // R29=000C when R12=009D;VCM[5:0] for VCOMH
 279   2          Write_Cmd_Data(0x002B, 0x000D); // Frame Rate = 91Hz
 280   2          delayms(30);    
 281   2          Write_Cmd_Data(0x0020, 0x0000); // GRAM horizontal Address
 282   2          Write_Cmd_Data(0x0021, 0x0000); // GRAM Vertical Address
 283   2      // ----------- Adjust the Gamma Curve ----------//               
 284   2              Write_Cmd_Data(0x0030, 0x0007);
 285   2              Write_Cmd_Data(0x0031, 0x0302);
 286   2          Write_Cmd_Data(0x0032, 0x0105);
 287   2              Write_Cmd_Data(0x0035, 0x0206);
 288   2          Write_Cmd_Data(0x0036, 0x0808);               
 289   2          Write_Cmd_Data(0x0037, 0x0206);
 290   2          Write_Cmd_Data(0x0038, 0x0504);
 291   2          Write_Cmd_Data(0x0039, 0x0007);
 292   2          Write_Cmd_Data(0x003C, 0x0105);
 293   2          Write_Cmd_Data(0x003D, 0x0808);
 294   2      //------------------ Set GRAM area ---------------//
 295   2          Write_Cmd_Data(0x0050, 0x0000); // Horizontal GRAM Start Address
 296   2          Write_Cmd_Data(0x0051, 0x00EF); // Horizontal GRAM End Address
 297   2          Write_Cmd_Data(0x0052, 0x0000); // Vertical GRAM Start Address
 298   2              delayms(30);
 299   2          Write_Cmd_Data(0x0053, 0x013F); // Vertical GRAM Start Address
 300   2              delayms(30);
 301   2          Write_Cmd_Data(0x0060, 0xA700); // Gate Scan Line
 302   2          Write_Cmd_Data(0x0061, 0x0001); // NDL,VLE, REV  
 303   2          Write_Cmd_Data(0x006A, 0x0000); // set scrolling line
C51 COMPILER V8.05a   INIT                                                                 05/31/2013 15:49:41 PAGE 6   

 304   2      //-------------- Partial Display Control ---------//
 305   2          Write_Cmd_Data(0x0080, 0x0000);
 306   2          Write_Cmd_Data(0x0081, 0x0000);
 307   2          Write_Cmd_Data(0x0082,0x0000); 
 308   2          Write_Cmd_Data(0x0083,0x0000); 
 309   2          Write_Cmd_Data(0x0084,0x0000); 
 310   2          Write_Cmd_Data(0x0085,0x0000); 
 311   2      //-------------- Panel Control -------------------//        
 312   2          Write_Cmd_Data(0x0090, 0x0010);
 313   2          Write_Cmd_Data(0x0092, 0x0000);
 314   2          Write_Cmd_Data(0x0093, 0x0003);
 315   2          Write_Cmd_Data(0x0095, 0x0110);
 316   2          Write_Cmd_Data(0x0097, 0x0000);
 317   2          Write_Cmd_Data(0x0098, 0x0000);
 318   2          Write_Cmd_Data(0x0007, 0x0133); // 262K color and display ON
 319   2      
 320   2              }       
 321   1      }
 322          
 323          void LCD_SetPos(unsigned int x0,unsigned int x1,unsigned int y0,unsigned int y1)
 324          {
 325   1      
 326   1        Write_Cmd_Data(0x50,x0);  // Horizontal GRAM Start Address
 327   1        Write_Cmd_Data(0x51,x1);  // Horizontal GRAM End Address
 328   1        Write_Cmd_Data(0x52,y0);  // Vertical GRAM Start Address
 329   1        Write_Cmd_Data(0x53,y1);  // Vertical GRAM Start Address
 330   1        Write_Cmd_Data(0x20,x0);  // GRAM horizontal Address
 331   1        Write_Cmd_Data(0x21,y0);  // GRAM Vertical Address
 332   1        Write_Cmd (0x00,0x22);    // 0x0022,Start to Write Data to GRAM 
 333   1      }
 334          
 335          void CLR_Screen(unsigned int bColor)
 336          {
 337   1              unsigned int i,j;
 338   1              LCD_SetPos(0,240,0,320);//320x240
 339   1              for (i=0;i<320;i++)
 340   1              {
 341   2                 for (j=0;j<240;j++)
 342   2                     Write_Data_U16(bColor);
 343   2              }
 344   1      }
 345          
 346          void Put_num(unsigned int x, unsigned int y, unsigned char ch, unsigned int fcolor, unsigned int bcolor)
 347          {
 348   1              unsigned int i, j, k;
 349   1              LCD_SetPos(x,  x+32-1,y, y+56-1);
 350   1              k = ch * 224;
 351   1              for(i = 0; i < 224; i ++)
 352   1              {
 353   2                      unsigned short m = ch56[i + k];
 354   2                      for(j = 0; j < 8; j ++)
 355   2                      {
 356   3                                 if((m&0x80) == 0x80)
 357   3                                 {
 358   4                                              Write_Data_U16(fcolor);
 359   4                                 }
 360   3                                 else
 361   3                                 {
 362   4                                              Write_Data_U16(bcolor);
 363   4                                 }
 364   3                                 m <<= 1;
 365   3                      }
C51 COMPILER V8.05a   INIT                                                                 05/31/2013 15:49:41 PAGE 7   

 366   2              }       
 367   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1339    ----
   CONSTANT SIZE    =   2240    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
