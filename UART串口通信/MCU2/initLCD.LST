C51 COMPILER V8.05a   INITLCD                                                              05/08/2013 14:01:24 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE INITLCD
OBJECT MODULE PLACED IN initLCD.OBJ
COMPILER INVOKED BY: F:\Keil\C51\BIN\C51.EXE initLCD.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg51.h>
   2          #include "initLCD.h"
   3          #include "num.h"
   4          
   5          #define DataPort P0    //数据口使用DataPor
   6          
   7          sbit RS    =P2^5;               //数据命令选择
   8          sbit RW    =P2^4;       //写数据/命令
   9          sbit nRD   =P2^3;       //读控制
  10          sbit CS    =P2^2;               //片选
  11          sbit RES   =P2^1;               //复位
  12          
  13          sbit LE    =P2^0;       //74HC573锁存控制
  14          
  15          extern unsigned int Device_code;
  16          
  17          void delayms(unsigned int count)
  18          {
  19   1          int i,j;                                                                                
  20   1          for(i=0;i<count;i++)                                                                    
  21   1             {
  22   2                   for(j=0;j<255;j++);
  23   2             }                                                                                     
  24   1      }
  25          
  26          void Write_Cmd(unsigned char DH,unsigned char DL)
  27          {
  28   1              CS=0;
  29   1              RS=0;
  30   1          nRD=1;
  31   1          RW=0;
  32   1      
  33   1          //注意：当使用8位数据口驱动16位数据模式时，使用74HC573作为IO扩展，程序如下
  34   1          DataPort=DL;            //送低8位命令给573待锁存
  35   1          LE=1;                   //锁存位
  36   1          LE=0;                   //断开锁存,位选573的Q7~Q0仍保持 
  37   1      
  38   1              DataPort=DH;            //送高8位命令给TFT
  39   1      
  40   1              /*
  41   1          //如果使用16位数据口驱动16位数据模式，则无需IO扩展，直接将数据送到数据口即可
  42   1          DataPort_L=DL; 
  43   1          DataPort_H=DH;
  44   1              */
  45   1      
  46   1              RW=1;
  47   1              CS=1;
  48   1      }
  49          
  50          void Write_Data(unsigned char DH,unsigned char DL)
  51          {
  52   1              
  53   1              CS=0;
  54   1              RS=1;
  55   1      
C51 COMPILER V8.05a   INITLCD                                                              05/08/2013 14:01:24 PAGE 2   

  56   1          //注意：当使用8位数据口驱动16位数据模式时，使用74HC573作为IO扩展，程序如下
  57   1              DataPort=DL;            //送低8位数据给573待锁存
  58   1          LE=1;                   //锁存位
  59   1          LE=0;                   //断开锁存,位选573的Q7~Q0仍保持 
  60   1      
  61   1              DataPort=DH;            //送高8位数据给TFT
  62   1      
  63   1              /*
  64   1          //如果使用16位数据口驱动16位数据模式，则无需IO扩展，直接将数据送到数据口即可
  65   1          DataPort_L=DL; 
  66   1          DataPort_H=DH;
  67   1              */
  68   1      
  69   1              RW=0;
  70   1              RW=1;
  71   1              CS=1;
  72   1      }
  73          
  74          void  Write_Data_U16(unsigned int y)
  75          {
  76   1              unsigned char m,n; 
  77   1              m=y>>8;
  78   1              n=y;
  79   1              Write_Data(m,n);
  80   1      }
  81          
  82          void  Write_Cmd_Data (unsigned char x,unsigned int y)
  83          {
  84   1              unsigned char m,n;
  85   1              m=y>>8;
  86   1              n=y;
  87   1              Write_Cmd(0x00,x);
  88   1              Write_Data(m,n);
  89   1      }
  90          
  91          void TFT_Initial(void)
  92          {  
  93   1      
  94   1          RES = 1;    
  95   1              delayms(1);                    // Delay 1ms 
  96   1              RES = 0;  
  97   1              delayms(10);                   // Delay 10ms            
  98   1              RES = 1;  
  99   1              delayms(50);                   // Delay 50 ms  
 100   1        
 101   1              if(Device_code==0x9320)
 102   1           {
 103   2      
 104   2          //************* Start Initial Sequence **********//
 105   2              Write_Cmd_Data(0x00,0x0001);   //Set the OSC bit as ‘1’ to start the internal oscillator
 106   2          Write_Cmd_Data(0x01,0x0100);   // set SS and SM bit
 107   2              Write_Cmd_Data(0x02,0x0700);   // set 1 line inversion
 108   2              Write_Cmd_Data(0x03,0x1030);   //set GRAM Write direction and BGR=1
 109   2          Write_Cmd_Data(0x04,0x0000);   // Resize register
 110   2              Write_Cmd_Data(0x08,0x0202);   // set the back porch and front porch
 111   2          Write_Cmd_Data(0x09,0x0000);   // set non-display area refresh cycle ISC[3:0]
 112   2          Write_Cmd_Data(0x0A,0x0000);   // FMARK function
 113   2          Write_Cmd_Data(0x0C,0x0000);   // RGB interface setting
 114   2              Write_Cmd_Data(0x0D,0x0000);   // Frame marker Position
 115   2          Write_Cmd_Data(0x0F,0x0000);   // RGB interface polarity
 116   2          delayms(30);
 117   2              //*************Power On sequence ****************//
C51 COMPILER V8.05a   INITLCD                                                              05/08/2013 14:01:24 PAGE 3   

 118   2              Write_Cmd_Data(0x10, 0x16b0);   // SAP, BT[3:0], AP, DSTB, SLP, STB
 119   2              delayms(30);
 120   2              Write_Cmd_Data(0x11, 0x0007);   //Write final user’s setting values to VC bit
 121   2              Write_Cmd_Data(0x12, 0x013a);   // set Internal reference voltage
 122   2              Write_Cmd_Data(0x13, 0x1a00);   // VDV[4:0] for VCOM amplitude
 123   2          delayms(30);
 124   2          Write_Cmd_Data(0x29, 0x000c);   // Set VCM[5:0] for VCOMH
 125   2              delayms(30); // Delay 50ms
 126   2      
 127   2              // ----------- Adjust the Gamma Curve ----------//
 128   2              Write_Cmd_Data(0x0030, 0x0000);
 129   2              Write_Cmd_Data(0x0031, 0x0505);
 130   2              Write_Cmd_Data(0x0032, 0x0304);
 131   2              Write_Cmd_Data(0x0035, 0x0006);
 132   2              Write_Cmd_Data(0x0036, 0x0707);
 133   2              Write_Cmd_Data(0x0037, 0x0105);
 134   2              Write_Cmd_Data(0x0038, 0x0002);
 135   2              Write_Cmd_Data(0x0039, 0x0707);
 136   2              Write_Cmd_Data(0x003C, 0x0704);
 137   2              Write_Cmd_Data(0x003D, 0x0807);
 138   2      
 139   2              //------------------ Set GRAM area ---------------//
 140   2              Write_Cmd_Data(0x0050, 0x0000); // Horizontal GRAM Start Address
 141   2              Write_Cmd_Data(0x0051, 0x00EF); // Horizontal GRAM End Address
 142   2              Write_Cmd_Data(0x0052, 0x0000); // Vertical GRAM Start Address
 143   2              Write_Cmd_Data(0x0053, 0x013F); // Vertical GRAM Start Address
 144   2              Write_Cmd_Data(0x0060, 0x2700); // Gate Scan Line
 145   2              Write_Cmd_Data(0x0061, 0x0001); // NDL,VLE, REV
 146   2              Write_Cmd_Data(0x006A, 0x0000); // set scrolling line
 147   2          Write_Cmd_Data(0x20, 0x0000);   // GRAM horizontal Address
 148   2              Write_Cmd_Data(0x21, 0x0000);   // GRAM Vertical Address
 149   2      
 150   2              //-------------- Partial Display Control ---------//
 151   2              Write_Cmd_Data(0x0080, 0x0000);
 152   2              Write_Cmd_Data(0x0081, 0x0000);
 153   2              Write_Cmd_Data(0x0082, 0x0000);
 154   2              Write_Cmd_Data(0x0083, 0x0000);
 155   2              Write_Cmd_Data(0x0084, 0x0000);
 156   2              Write_Cmd_Data(0x0085, 0x0000);
 157   2      
 158   2              //-------------- Panel Control ---------//
 159   2          Write_Cmd_Data(0x90,0x0010);   //Frame Cycle Contral
 160   2              Write_Cmd_Data(0x92,0x0000);   //Panel Interface Contral
 161   2              Write_Cmd_Data(0x93,0x0003);   //Panel Interface Contral 3. 
 162   2              Write_Cmd_Data(0x95,0x0110);   //Frame Cycle Contral
 163   2              Write_Cmd_Data(0x97,0x0000);   // 
 164   2              Write_Cmd_Data(0x98,0x0000);   //Frame Cycle Contral.     
 165   2      
 166   2              //-------------- Display on ---------//
 167   2          Write_Cmd_Data(0x07,0x0173); 
 168   2      
 169   2              }
 170   1      
 171   1              else if(Device_code==0x1505 )
 172   1           {
 173   2      
 174   2          //************* Start Initial Sequence **********//
 175   2              Write_Cmd_Data(0x00,0x0001);   //Set the OSC bit as ‘1’ to start the internal oscillator
 176   2          Write_Cmd_Data(0x01,0x0100);   // set SS and SM bit
 177   2              Write_Cmd_Data(0x02,0x0700);   // set 1 line inversion
 178   2              Write_Cmd_Data(0x03,0x1030);   //set GRAM Write direction and BGR=1
 179   2          Write_Cmd_Data(0x04,0x0000);   // Resize register
C51 COMPILER V8.05a   INITLCD                                                              05/08/2013 14:01:24 PAGE 4   

 180   2              Write_Cmd_Data(0x08,0x0202);   // set the back porch and front porch
 181   2          Write_Cmd_Data(0x09,0x0000);   // set non-display area refresh cycle ISC[3:0]
 182   2          Write_Cmd_Data(0x0A,0x0000);   // FMARK function
 183   2          Write_Cmd_Data(0x0C,0x0000);   // RGB interface setting
 184   2              Write_Cmd_Data(0x0D,0x0000);   // Frame marker Position
 185   2          Write_Cmd_Data(0x0F,0x0000);   // RGB interface polarity
 186   2          delayms(30);
 187   2              //*************Power On sequence ****************//
 188   2              Write_Cmd_Data(0x10, 0x16b0);   // SAP, BT[3:0], AP, DSTB, SLP, STB
 189   2              delayms(30);
 190   2              Write_Cmd_Data(0x11, 0x0007);   //Write final user’s setting values to VC bit
 191   2              Write_Cmd_Data(0x12, 0x013a);   // set Internal reference voltage
 192   2              Write_Cmd_Data(0x13, 0x1a00);   // VDV[4:0] for VCOM amplitude
 193   2          delayms(30);
 194   2          Write_Cmd_Data(0x29, 0x000c);   // Set VCM[5:0] for VCOMH
 195   2              delayms(30); // Delay 50ms
 196   2      
 197   2              // ----------- Adjust the Gamma Curve ----------//
 198   2              Write_Cmd_Data(0x0030, 0x0000);
 199   2              Write_Cmd_Data(0x0031, 0x0505);
 200   2              Write_Cmd_Data(0x0032, 0x0304);
 201   2              Write_Cmd_Data(0x0035, 0x0006);
 202   2              Write_Cmd_Data(0x0036, 0x0707);
 203   2              Write_Cmd_Data(0x0037, 0x0105);
 204   2              Write_Cmd_Data(0x0038, 0x0002);
 205   2              Write_Cmd_Data(0x0039, 0x0707);
 206   2              Write_Cmd_Data(0x003C, 0x0704);
 207   2              Write_Cmd_Data(0x003D, 0x0807);
 208   2      
 209   2              //------------------ Set GRAM area ---------------//
 210   2              Write_Cmd_Data(0x0050, 0x0000); // Horizontal GRAM Start Address
 211   2              Write_Cmd_Data(0x0051, 0x00EF); // Horizontal GRAM End Address
 212   2              Write_Cmd_Data(0x0052, 0x0000); // Vertical GRAM Start Address
 213   2              Write_Cmd_Data(0x0053, 0x013F); // Vertical GRAM Start Address
 214   2              Write_Cmd_Data(0x0060, 0x2700); // Gate Scan Line
 215   2              Write_Cmd_Data(0x0061, 0x0001); // NDL,VLE, REV
 216   2              Write_Cmd_Data(0x006A, 0x2700); // set scrolling line
 217   2          Write_Cmd_Data(0x20, 0x0000);   // GRAM horizontal Address
 218   2              Write_Cmd_Data(0x21, 0x0000);   // GRAM Vertical Address
 219   2      
 220   2              //-------------- Partial Display Control ---------//
 221   2              Write_Cmd_Data(0x0080, 0x0000);
 222   2              Write_Cmd_Data(0x0081, 0x0000);
 223   2              Write_Cmd_Data(0x0082, 0x0000);
 224   2              Write_Cmd_Data(0x0083, 0x0000);
 225   2              Write_Cmd_Data(0x0084, 0x0000);
 226   2              Write_Cmd_Data(0x0085, 0x0000);
 227   2      
 228   2              //-------------- Panel Control ---------//
 229   2          Write_Cmd_Data(0x90,0x0010);   //Frame Cycle Contral
 230   2              Write_Cmd_Data(0x92,0x0000);   //Panel Interface Contral
 231   2              Write_Cmd_Data(0x93,0x0003);   //Panel Interface Contral 3. 
 232   2              Write_Cmd_Data(0x95,0x0110);   //Frame Cycle Contral
 233   2              Write_Cmd_Data(0x97,0x0000);   // 
 234   2              Write_Cmd_Data(0x98,0x0000);   //Frame Cycle Contral.     
 235   2      
 236   2              //-------------- Display on ---------//
 237   2          Write_Cmd_Data(0x07,0x0173); 
 238   2      
 239   2              }
 240   1      
 241   1          else if(Device_code==0x9328)
C51 COMPILER V8.05a   INITLCD                                                              05/08/2013 14:01:24 PAGE 5   

 242   1           {
 243   2      
 244   2          //************* Start Initial Sequence **********//
 245   2               Write_Cmd_Data(0x0001,0x0100);   //set SS and SM bit //设置扫描方向
 246   2          Write_Cmd_Data(0x0002,0x0700);   //EOR=1 and B/C=1 to set the line inversion  //设置行反转
 247   2          Write_Cmd_Data(0x0003,0x1030);   //set Entry Mode  //设置进入模式   
 248   2          Write_Cmd_Data(0x0004,0x0000);   //
 249   2          Write_Cmd_Data(0x00A4,0x0001);
 250   2          Write_Cmd_Data(0x0008,0x0202); // set the back porch and front porch
 251   2          Write_Cmd_Data(0x0009,0x0000); // set non-display area refresh cycle ISC[3:0]
 252   2          Write_Cmd_Data(0x000A,0x0000); // FMARK function
 253   2          Write_Cmd_Data(0x000C,0x0000); // RGB interface setting
 254   2          Write_Cmd_Data(0x000D, 0x0000); // Frame marker Position
 255   2          Write_Cmd_Data(0x000F, 0x0000); // RGB interface polarity
 256   2      
 257   2      
 258   2      
 259   2      //*************Power On sequence ****************//
 260   2          Write_Cmd_Data(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB 
 261   2          Write_Cmd_Data(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 262   2          Write_Cmd_Data(0x0012, 0x0000); // VREG1OUT voltage
 263   2          Write_Cmd_Data(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude 
 264   2          delayms(30);
 265   2          Write_Cmd_Data(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB 
 266   2          Write_Cmd_Data(0x0011, 0x0227); // R11h=0x0221 at VCI=3.3V, DC1[2:0], DC0[2:0], VC[2:0]
 267   2          delayms(30);
 268   2          Write_Cmd_Data(0x0012, 0x001C); // External reference voltage= Vci;
 269   2          delayms(30); 
 270   2          Write_Cmd_Data(0x0013, 0x1800); // R13=1200 when R12=009D;VDV[4:0] for VCOM amplitude
 271   2          Write_Cmd_Data(0x0029, 0x001C); // R29=000C when R12=009D;VCM[5:0] for VCOMH
 272   2          Write_Cmd_Data(0x002B, 0x000D); // Frame Rate = 91Hz
 273   2          delayms(30);    
 274   2          Write_Cmd_Data(0x0020, 0x0000); // GRAM horizontal Address
 275   2          Write_Cmd_Data(0x0021, 0x0000); // GRAM Vertical Address
 276   2      // ----------- Adjust the Gamma Curve ----------//               
 277   2              Write_Cmd_Data(0x0030, 0x0007);
 278   2              Write_Cmd_Data(0x0031, 0x0302);
 279   2          Write_Cmd_Data(0x0032, 0x0105);
 280   2              Write_Cmd_Data(0x0035, 0x0206);
 281   2          Write_Cmd_Data(0x0036, 0x0808);               
 282   2          Write_Cmd_Data(0x0037, 0x0206);
 283   2          Write_Cmd_Data(0x0038, 0x0504);
 284   2          Write_Cmd_Data(0x0039, 0x0007);
 285   2          Write_Cmd_Data(0x003C, 0x0105);
 286   2          Write_Cmd_Data(0x003D, 0x0808);
 287   2      //------------------ Set GRAM area ---------------//
 288   2          Write_Cmd_Data(0x0050, 0x0000); // Horizontal GRAM Start Address
 289   2          Write_Cmd_Data(0x0051, 0x00EF); // Horizontal GRAM End Address
 290   2          Write_Cmd_Data(0x0052, 0x0000); // Vertical GRAM Start Address
 291   2              delayms(30);
 292   2          Write_Cmd_Data(0x0053, 0x013F); // Vertical GRAM Start Address
 293   2              delayms(30);
 294   2          Write_Cmd_Data(0x0060, 0xA700); // Gate Scan Line
 295   2          Write_Cmd_Data(0x0061, 0x0001); // NDL,VLE, REV  
 296   2          Write_Cmd_Data(0x006A, 0x0000); // set scrolling line
 297   2      //-------------- Partial Display Control ---------//
 298   2          Write_Cmd_Data(0x0080, 0x0000);
 299   2          Write_Cmd_Data(0x0081, 0x0000);
 300   2          Write_Cmd_Data(0x0082,0x0000); 
 301   2          Write_Cmd_Data(0x0083,0x0000); 
 302   2          Write_Cmd_Data(0x0084,0x0000); 
 303   2          Write_Cmd_Data(0x0085,0x0000); 
C51 COMPILER V8.05a   INITLCD                                                              05/08/2013 14:01:24 PAGE 6   

 304   2      //-------------- Panel Control -------------------//        
 305   2          Write_Cmd_Data(0x0090, 0x0010);
 306   2          Write_Cmd_Data(0x0092, 0x0000);
 307   2          Write_Cmd_Data(0x0093, 0x0003);
 308   2          Write_Cmd_Data(0x0095, 0x0110);
 309   2          Write_Cmd_Data(0x0097, 0x0000);
 310   2          Write_Cmd_Data(0x0098, 0x0000);
 311   2          Write_Cmd_Data(0x0007, 0x0133); // 262K color and display ON
 312   2      
 313   2              }
 314   1      }
 315          
 316          void LCD_SetPos(unsigned int x0,unsigned int x1,unsigned int y0,unsigned int y1)
 317          {
 318   1      
 319   1        Write_Cmd_Data(0x50,x0);  // Horizontal GRAM Start Address
 320   1        Write_Cmd_Data(0x51,x1);  // Horizontal GRAM End Address
 321   1        Write_Cmd_Data(0x52,y0);  // Vertical GRAM Start Address
 322   1        Write_Cmd_Data(0x53,y1);  // Vertical GRAM Start Address
 323   1        Write_Cmd_Data(0x20,x0);  // GRAM horizontal Address
 324   1        Write_Cmd_Data(0x21,y0);  // GRAM Vertical Address
 325   1        Write_Cmd (0x00,0x22);    // 0x0022,Start to Write Data to GRAM 
 326   1      }
 327          
 328          void CLR_Screen(unsigned int bColor)
 329          {
 330   1       unsigned int i,j;
 331   1       LCD_SetPos(0,240,0,320);//320x240
 332   1       for (i=0;i<320;i++)
 333   1              {
 334   2                 for (j=0;j<240;j++)
 335   2                     Write_Data_U16(bColor);
 336   2              }
 337   1      }
 338          
 339          void Put_num(unsigned int x, unsigned int y, unsigned char ch, unsigned int fcolor, unsigned int bcolor)
 340          {
 341   1              unsigned int i, j, k;
 342   1              LCD_SetPos(x,  x+32-1,y, y+56-1);
 343   1              k = ch * 224;
 344   1              for(i = 0; i < 224; i ++)
 345   1              {
 346   2                      unsigned short m = ch56[i + k];
 347   2                      for(j = 0; j < 8; j ++)
 348   2                      {
 349   3                                 if((m&0x80) == 0x80)
 350   3                                 {
 351   4                                              Write_Data_U16(fcolor);
 352   4                                 }
 353   3                                 else
 354   3                                 {
 355   4                                              Write_Data_U16(bcolor);
 356   4                                 }
 357   3                                 m <<= 1;
 358   3                      }
 359   2              }       
 360   1      }
 361          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1324    ----
C51 COMPILER V8.05a   INITLCD                                                              05/08/2013 14:01:24 PAGE 7   

   CONSTANT SIZE    =   3584    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
